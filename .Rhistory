data_norm[NColumns] <- lapply(ExchangeData[NColumns], normalize)
# Input Matrix
TrainData <- na.omit(data_norm[1:400,])
TestData <- na.omit(data_norm[401:500,])
set.seed(123)  # for reproducibility
NeuralNetworkModel <- neuralnet(USD_EUR ~ Lag_1 + Lag_2 + Lag_3 + Lag_4, data = TrainData, hidden = c(5, 3), linear.output = TRUE)
plot(NeuralNetworkModel)
library(neuralnet)
library(readxl)
library(Metrics)
library(grid)
library(dplyr)
#read the data
exchangeData <- read_xlsx("ExchangeUSD.xlsx")
str(exchangeData)
summary(exchangeData)
# Focus on the 'USD/EUR' column
exchange_rate<-exchangeData$USD/EUR
summary(exchange_rate)
#Function to normalize data
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
# Function to unnormalize data
unnormalize <- function(x, min, max) {
return( (max - min)*x + min )
}
#=====================================================#
#create time-lagged input variables up to (t-4) level
#=====================================================#
exchange_T4 <- bind_cols(
input_1 = lag(exchange_rate, 1),
input_2 = lag(exchange_rate, 2),
input_3 = lag(exchange_rate, 3),
input_4 = lag(exchange_rate, 4),
rate=exchange_rate)
exchange_T4<-exchange_T4[complete.cases(exchange_T4),]
head(exchange_T4)
# Focus on the 'USD/EUR' column
exchange_rate<-exchangeData$USD/EUR
library(neuralnet)
library(Metrics)
library(readxl)
# Data Loading
ExchangeData <- read_excel("ExchangeUSD.xlsx")
colnames(ExchangeData)[colnames(ExchangeData) == "USD/EUR"] <- "USD_EUR" # Rename column for compatibility
# Create lagged features t-1 to t-4
exchangeRates <- ExchangeData$USD_EUR
for (lag in 1:4) {
ExchangeData[paste("Lag", lag, sep = "_")] <- c(rep(NA, lag), exchangeRates[1:(length(exchangeRates) - lag)])
}
# Normalization function (Min-Max Scaling)
normalize <- function(x) {
return((x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE)))
}
# Apply normalization to numeric columns
NColumns <- sapply(ExchangeData, is.numeric)
ExchangeData[NColumns] <- lapply(ExchangeData[NColumns], normalize)
# Data partitioning
TrainData <- na.omit(ExchangeData[1:400,])
TestData <- na.omit(ExchangeData[401:500,])
# Set seed for reproducibility
set.seed(123)
# Define the formula
formula <- USD_EUR ~ Lag_1 + Lag_2 + Lag_3 + Lag_4
# Neural Network Models with different configurations
NN1 <- neuralnet(formula, data = TrainData, hidden = 5, linear.output = TRUE)
NN2 <- neuralnet(formula, data = TrainData, hidden = c(5,3), linear.output = TRUE)
NN3 <- neuralnet(formula, data = TrainData, hidden = c(5,3,2), linear.output = TRUE)
NN4 <- neuralnet(formula, data = TrainData, hidden = c(5,4,3,2), linear.output = TRUE)
# Prepare test data for predictions
TestingData <- TestData[, c("Lag_1", "Lag_2", "Lag_3", "Lag_4")]
# Predictions and performance evaluation for each model
models <- list(NN1, NN2, NN3, NN4)
model_names <- c("Model 1", "Model 2", "Model 3", "Model 4")
for (i in 1:length(models)) {
predictions <- compute(models[[i]], TestingData)$net.result
actual <- TestData$USD_EUR
# Calculate error metrics
RMSE  <- rmse(actual, predictions)
MAE   <- mae(actual, predictions)
MAPE  <- mape(actual, predictions)
SMAPE <- smape(actual, predictions)
# Print results
cat(paste("\n", model_names[i], " - RMSE:", RMSE, "MAE:", MAE, "MAPE:", MAPE, "sMAPE:", SMAPE, "\n"))
}
# Plotting results for Model 1 (as an example)
plot(actual, type = 'l', col = 'blue', ylim = range(c(actual, predictions)), ylab = "Exchange Rate", xlab = "Days", main = "Actual and Predicted Exchange Rates(USD/EUR)")
for (i in 1:length(models)) {
predictions <- compute(models[[i]], TestingData)$net.result
actual <- TestData$USD_EUR
# Calculate error metrics
RMSE  <- rmse(actual, predictions)
MAE   <- mae(actual, predictions)
MAPE  <- mape(actual, predictions)
SMAPE <- smape(actual, predictions)
# Print results
cat(paste("\n", model_names[i], " - RMSE:", RMSE, "MAE:", MAE, "MAPE:", MAPE, "sMAPE:", SMAPE, "\n"))
}
# Load necessary libraries
if (!require("neuralnet")) install.packages("neuralnet")
# Loop through each model and calculate performance metrics
models <- list(NN1, NN2, NN3, NN4)
model_names <- c("Model 1", "Model 2", "Model 3", "Model 4")
for (i in 1:length(models)) {
# Use compute from neuralnet explicitly
predictions <- neuralnet::compute(models[[i]], TestingData)$net.result
actual <- TestData$USD_EUR
# Calculate error metrics
RMSE  <- rmse(actual, predictions)
MAE   <- mae(actual, predictions)
MAPE  <- mape(actual, predictions)
SMAPE <- smape(actual, predictions)
# Print results
cat(paste("\n", model_names[i], " - RMSE:", RMSE, "MAE:", MAE, "MAPE:", MAPE, "sMAPE:", SMAPE, "\n"))
}
# Optional: Include this at the end if you are unsure whether the function exists
if (!"compute" %in% methods(package = "neuralnet")) {
stop("The function compute does not exist in the neuralnet package. Please check the package documentation.")
}
# Plotting results for Model 1 (as an example)
plot(actual, type = 'l', col = 'blue', ylim = range(c(actual, predictions)), ylab = "Exchange Rate", xlab = "Days", main = "Actual and Predicted Exchange Rates(USD/EUR)")
lines(predictions, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted data"), lty = 1)
# Plotting results for Model 1 (as an example)
plot(actual, type = '2', col = 'blue', ylim = range(c(actual, predictions)), ylab = "Exchange Rate", xlab = "Days", main = "Actual and Predicted Exchange Rates(USD/EUR)")
# Plotting results for Model 1 (as an example)
plot(actual, type = '1', col = 'blue', ylim = range(c(actual, predictions)), ylab = "Exchange Rate", xlab = "Days", main = "Actual and Predicted Exchange Rates(USD/EUR)")
lines(predictions, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted data"), lty = 1)
# Prepare test data for predictions
TestingData <- TestData[, c("Lag_1", "Lag_2", "Lag_3", "Lag_4")]
# Loop through each model and calculate performance metrics
models <- list(MLP1, MLP2, MLP3, MLP4)
#MLP Neural Network: 1st case (1 hidden layer with 5 neurons)
MLP1 <- neuralnet(formula, data = TrainData, hidden = 5, linear.output = TRUE)
#MLP Neural Network: 2st case (2 hidden layers (5,3))
MLP2 <- neuralnet(formula, data = TrainData, hidden = c(5,3), linear.output = TRUE)
#MLP Neural Network: 3st case (3 hidden layers (5,3,2))
MLP3 <- neuralnet(formula, data = TrainData, hidden = c(5,3,2), linear.output = TRUE)
#MLP Neural Network: 4st case (4 hidden layers (5,4,3,2))
MLP4 <- neuralnet(formula, data = TrainData, hidden = c(5,4,3,2), linear.output = TRUE)
# Prepare test data for predictions
TestingData <- TestData[, c("Lag_1", "Lag_2", "Lag_3", "Lag_4")]
# Loop through each model and calculate performance metrics
models <- list(MLP1, MLP2, MLP3, MLP4)
model_names <- c("Model 1", "Model 2", "Model 3", "Model 4")
for (i in 1:length(models)) {
# Use compute from neuralnet explicitly
predictions <- neuralnet::compute(models[[i]], TestingData)$net.result
actual <- TestData$USD_EUR
# Calculate error metrics
RMSE  <- rmse(actual, predictions)
MAE   <- mae(actual, predictions)
MAPE  <- mape(actual, predictions)
SMAPE <- smape(actual, predictions)
# Print results
cat(paste("\n", model_names[i], " - RMSE:", RMSE, "MAE:", MAE, "MAPE:", MAPE, "sMAPE:", SMAPE, "\n"))
}
# Plotting results for Model 1 (as an example)
plot(actual, type = '1', col = 'blue', ylim = range(c(actual, predictions)), ylab = "Exchange Rate", xlab = "Days", main = "Actual and Predicted Exchange Rates(USD/EUR)")
lines(predictions, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted data"), lty = 1)
# Plotting results for Model 1 (as an example)
plot(actual, type = '1', col = 'blue', ylim = range(c(actual, predictions)), ylab = "Exchange Rate", xlab = "Days", main = "Actual and Predicted Exchange Rates(USD/EUR)")
# Load necessary libraries
if (!require("neuralnet")) install.packages("neuralnet")
if (!require("Metrics")) install.packages("Metrics")
if (!require("readxl")) install.packages("readxl")
library(neuralnet)
library(Metrics)
library(readxl)
# Data Loading
ExchangeData <- read_excel("ExchangeUSD.xlsx")
colnames(ExchangeData)[colnames(ExchangeData) == "USD/EUR"] <- "USD_EUR" # Rename column for compatibility
# Create lagged features t-1 to t-4
exchangeRates <- ExchangeData$USD_EUR
for (lag in 1:4) {
ExchangeData[paste("Lag", lag, sep = "_")] <- c(rep(NA, lag), exchangeRates[1:(length(exchangeRates) - lag)])
}
# Normalization function (Min-Max Scaling)
normalize <- function(x) {
return((x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE)))
}
# Apply normalization to numeric columns
NColumns <- sapply(ExchangeData, is.numeric)
ExchangeData[NColumns] <- lapply(ExchangeData[NColumns], normalize)
# Data partitioning
TrainData <- na.omit(ExchangeData[1:400,])
TestData <- na.omit(ExchangeData[401:500,])
# Set seed for reproducibility
set.seed(123)
# Define the formula
formula <- USD_EUR ~ Lag_1 + Lag_2 + Lag_3 + Lag_4
#MLP Neural Network: 1st case (1 hidden layer with 5 neurons)
MLP1 <- neuralnet(formula, data = TrainData, hidden = 5, linear.output = TRUE)
#MLP Neural Network: 2st case (2 hidden layers (5,3))
MLP2 <- neuralnet(formula, data = TrainData, hidden = c(5,3), linear.output = TRUE)
#MLP Neural Network: 3st case (3 hidden layers (5,3,2))
MLP3 <- neuralnet(formula, data = TrainData, hidden = c(5,3,2), linear.output = TRUE)
#MLP Neural Network: 4st case (4 hidden layers (5,4,3,2))
MLP4 <- neuralnet(formula, data = TrainData, hidden = c(5,4,3,2), linear.output = TRUE)
# Prepare test data for predictions
TestingData <- TestData[, c("Lag_1", "Lag_2", "Lag_3", "Lag_4")]
# Loop through each model and calculate performance metrics
models <- list(MLP1, MLP2, MLP3, MLP4)
model_names <- c("Model 1", "Model 2", "Model 3", "Model 4")
for (i in 1:length(models)) {
# Use compute from neuralnet explicitly
predictions <- neuralnet::compute(models[[i]], TestingData)$net.result
actual <- TestData$USD_EUR
# Calculate error metrics
RMSE  <- rmse(actual, predictions)
MAE   <- mae(actual, predictions)
MAPE  <- mape(actual, predictions)
SMAPE <- smape(actual, predictions)
# Print results
cat(paste("\n", model_names[i], " - RMSE:", RMSE, "MAE:", MAE, "MAPE:", MAPE, "sMAPE:", SMAPE, "\n"))
}
for (i in 1:length(models)) {
predictions <- neuralnet::compute(models[[i]], TestingData)$net.result
plot(TestData$USD_EUR, type = 'l', col = 'blue', ylim = range(c(TestData$USD_EUR, predictions)), ylab = "Exchange Rate", xlab = "Days", main = paste("Model", i, " - Actual and Predicted Exchange Rates (USD/EUR)"))
lines(predictions, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted Data"), lty = 1)
}
# Load necessary libraries
if (!require("neuralnet")) install.packages("neuralnet")
if (!require("Metrics")) install.packages("Metrics")
if (!require("readxl")) install.packages("readxl")
library(neuralnet)
library(Metrics)
library(readxl)
# Data Loading
ExchangeData <- read_excel("ExchangeUSD.xlsx")
colnames(ExchangeData)[colnames(ExchangeData) == "USD/EUR"] <- "USD_EUR" # Rename column for compatibility
# Create lagged features t-1 to t-4
exchangeRates <- ExchangeData$USD_EUR
for (lag in 1:4) {
ExchangeData[paste("Lag", lag, sep = "_")] <- c(rep(NA, lag), exchangeRates[1:(length(exchangeRates) - lag)])
}
# Normalization function (Min-Max Scaling)
normalize <- function(x) {
return((x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE)))
}
# Apply normalization to numeric columns
NColumns <- sapply(ExchangeData, is.numeric)
ExchangeData[NColumns] <- lapply(ExchangeData[NColumns], normalize)
# Data partitioning
TrainData <- na.omit(ExchangeData[1:400,])
TestData <- na.omit(ExchangeData[401:500,])
# Set seed for reproducibility
set.seed(123)
# Define the formula
formula <- USD_EUR ~ Lag_1 + Lag_2 + Lag_3 + Lag_4
#MLP Neural Network: 1st case (1 hidden layer with 5 neurons)
MLP1 <- neuralnet(formula, data = TrainData, hidden = 5, linear.output = TRUE)
plot(MLP1)
#MLP Neural Network: 2st case (2 hidden layers (5,3))
MLP2 <- neuralnet(formula, data = TrainData, hidden = c(5,3), linear.output = TRUE)
plot(MLP2)
#MLP Neural Network: 3st case (3 hidden layers (5,3,2))
MLP3 <- neuralnet(formula, data = TrainData, hidden = c(5,3,2), linear.output = TRUE)
plot(MLP3)
#MLP Neural Network: 4st case (4 hidden layers (5,4,3,2))
MLP4 <- neuralnet(formula, data = TrainData, hidden = c(5,4,3,2), linear.output = TRUE)
plot(MLP4)
# Prepare test data for predictions
TestingData <- TestData[, c("Lag_1", "Lag_2", "Lag_3", "Lag_4")]
# Loop through each model and calculate performance metrics
models <- list(MLP1, MLP2, MLP3, MLP4)
model_names <- c("Model 1", "Model 2", "Model 3", "Model 4")
for (i in 1:length(models)) {
# Use compute from neuralnet explicitly
predictions <- neuralnet::compute(models[[i]], TestingData)$net.result
actual <- TestData$USD_EUR
# Calculate error metrics
RMSE  <- rmse(actual, predictions)
MAE   <- mae(actual, predictions)
MAPE  <- mape(actual, predictions)
SMAPE <- smape(actual, predictions)
# Print results
cat(paste("\n", model_names[i], " - RMSE:", RMSE, "MAE:", MAE, "MAPE:", MAPE, "sMAPE:", SMAPE, "\n"))
}
# Plot for Model 1
plot(actual1, type = 'l', col = 'blue', ylim = range(c(actual1, predictions1)), ylab = "Exchange Rate", xlab = "Days", main = "Model 1 - Actual vs Predicted")
# Plot for Model 1
plot(actual1, type = 'l', col = 'blue', ylim = range(c(actual1, predictions1)), ylab = "Exchange Rate", xlab = "Days", main = "Model 1 - Actual vs Predicted")
lines(predictions1, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted Data"), lty = 1)
# Plot for Model 2
plot(actual2, type = 'l', col = 'blue', ylim = range(c(actual2, predictions2)), ylab = "Exchange Rate", xlab = "Days", main = "Model 2 - Actual vs Predicted")
lines(predictions2, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted Data"), lty = 1)
# Prepare test data for predictions
TestingData <- TestData[, c("Lag_1", "Lag_2", "Lag_3", "Lag_4")]
actual <- TestData$USD_EUR
# Model 1 Predictions and Metrics
predictions1 <- neuralnet::compute(MLP1, TestingData)$net.result
RMSE1  <- rmse(actual, predictions1)
MAE1   <- mae(actual, predictions1)
MAPE1  <- mape(actual, predictions1)
SMAPE1 <- smape(actual, predictions1)
cat("\nModel 1 - RMSE:", RMSE1, "MAE:", MAE1, "MAPE:", MAPE1, "sMAPE:", SMAPE1, "\n")
# Model 2 Predictions and Metrics
predictions2 <- neuralnet::compute(MLP2, TestingData)$net.result
RMSE2  <- rmse(actual, predictions2)
MAE2   <- mae(actual, predictions2)
MAPE2  <- mape(actual, predictions2)
SMAPE2 <- smape(actual, predictions2)
cat("\nModel 2 - RMSE:", RMSE2, "MAE:", MAE2, "MAPE:", MAPE2, "sMAPE:", SMAPE2, "\n")
# Model 3 Predictions and Metrics
predictions3 <- neuralnet::compute(MLP3, TestingData)$net.result
RMSE3  <- rmse(actual, predictions3)
MAE3   <- mae(actual, predictions3)
MAPE3  <- mape(actual, predictions3)
SMAPE3 <- smape(actual, predictions3)
cat("\nModel 3 - RMSE:", RMSE3, "MAE:", MAE3, "MAPE:", MAPE3, "sMAPE:", SMAPE3, "\n")
# Model 4 Predictions and Metrics
predictions4 <- neuralnet::compute(MLP4, TestingData)$net.result
RMSE4  <- rmse(actual, predictions4)
MAE4   <- mae(actual, predictions4)
MAPE4  <- mape(actual, predictions4)
SMAPE4 <- smape(actual, predictions4)
cat("\nModel 4 - RMSE:", RMSE4, "MAE:", MAE4, "MAPE:", MAPE4, "sMAPE:", SMAPE4, "\n")
# Plot for Model 1
plot(actual1, type = 'l', col = 'blue', ylim = range(c(actual1, predictions1)), ylab = "Exchange Rate", xlab = "Days", main = "Model 1 - Actual vs Predicted")
# Plot for Model 1
plot(actual1, type = 'l', col = 'blue', ylim = range(c(actual1, predictions1)), ylab = "Exchange Rate", xlab = "Days", main = "Model 1 - Actual vs Predicted")
lines(predictions1, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted Data"), lty = 1)
# Plot for Model 2
plot(actual2, type = 'l', col = 'blue', ylim = range(c(actual2, predictions2)), ylab = "Exchange Rate", xlab = "Days", main = "Model 2 - Actual vs Predicted")
lines(predictions2, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted Data"), lty = 1)
# Plot for Model 3
plot(actual3, type = 'l', col = 'blue', ylim = range(c(actual3, predictions3)), ylab = "Exchange Rate", xlab = "Days", main = "Model 3 - Actual vs Predicted")
lines(predictions3, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted Data"), lty = 1)
# Plot for Model 4
plot(actual4, type = 'l', col = 'blue', ylim = range(c(actual4, predictions4)), ylab = "Exchange Rate", xlab = "Days", main = "Model 4 - Actual vs Predicted")
lines(predictions4, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted Data"), lty = 1)
# Plot for Model 1
plot(actual, type = 'l', col = 'blue', ylim = range(c(actual1, predictions1)), ylab = "Exchange Rate", xlab = "Days", main = "Model 1 - Actual vs Predicted")
# Plot for Model 1
plot(actual, type = 'l', col = 'blue', ylim = range(c(actual, predictions1)), ylab = "Exchange Rate", xlab = "Days", main = "Model 1 - Actual vs Predicted")
lines(predictions1, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted Data"), lty = 1)
# Plot for Model 2
plot(actual, type = 'l', col = 'blue', ylim = range(c(actual, predictions2)), ylab = "Exchange Rate", xlab = "Days", main = "Model 2 - Actual vs Predicted")
lines(predictions2, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted Data"), lty = 1)
# Plot for Model 3
plot(actual, type = 'l', col = 'blue', ylim = range(c(actual, predictions3)), ylab = "Exchange Rate", xlab = "Days", main = "Model 3 - Actual vs Predicted")
lines(predictions3, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted Data"), lty = 1)
# Plot for Model 4
plot(actual, type = 'l', col = 'blue', ylim = range(c(actual, predictions4)), ylab = "Exchange Rate", xlab = "Days", main = "Model 4 - Actual vs Predicted")
lines(predictions4, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted Data"), lty = 1)
print("MLP1 Metrics")
cat("\nModel 1 - RMSE:", RMSE1, "MAE:", MAE1, "MAPE:", MAPE1, "sMAPE:", SMAPE1, "\n")
print(MLP1 Metrics)
# Model 1
predictions1 <- neuralnet::compute(MLP1, TestingData)$net.result
RMSE1  <- rmse(actual, predictions1)
MAE1   <- mae(actual, predictions1)
MAPE1  <- mape(actual, predictions1)
SMAPE1 <- smape(actual, predictions1)
cat(  "\nMLP 01 - RMSE:", RMSE1, "MAE:", MAE1, "MAPE:", MAPE1, "sMAPE:", SMAPE1, "\n")
summary(predictions1)
#MLP Neural Network: 1st case (1 hidden layer with 5 neurons)
MLP1 <- neuralnet(formula, data = TrainData, hidden = 5, linear.output = TRUE)
plot(MLP1)
#MLP Neural Network: 2st case (2 hidden layers (5,3))
MLP2 <- neuralnet(formula, data = TrainData, hidden = c(5,3), linear.output = TRUE)
plot(MLP2)
#MLP Neural Network: 3st case (3 hidden layers (5,3,2))
MLP3 <- neuralnet(formula, data = TrainData, hidden = c(5,3,2), linear.output = TRUE)
plot(MLP3)
#MLP Neural Network: 4st case (4 hidden layers (5,4,3,2))
MLP4 <- neuralnet(formula, data = TrainData, hidden = c(5,4,3,2), linear.output = TRUE)
plot(MLP4)
# Model 1
predictions1 <- neuralnet::compute(MLP1, TestingData)$net.result
RMSE1  <- rmse(actual, predictions1)
MAE1   <- mae(actual, predictions1)
MAPE1  <- mape(actual, predictions1)
SMAPE1 <- smape(actual, predictions1)
cat(  "\nMLP 01 - RMSE:", RMSE1, "MAE:", MAE1, "MAPE:", MAPE1, "sMAPE:", SMAPE1, "\n")
summary(predictions1)
# Model 2
predictions2 <- neuralnet::compute(MLP2, TestingData)$net.result
RMSE2  <- rmse(actual, predictions2)
MAE2   <- mae(actual, predictions2)
MAPE2  <- mape(actual, predictions2)
SMAPE2 <- smape(actual, predictions2)
cat("\nMLP 2 - RMSE:", RMSE2, "MAE:", MAE2, "MAPE:", MAPE2, "sMAPE:", SMAPE2, "\n")
summary(predictions2)
# Model 3
predictions3 <- neuralnet::compute(MLP3, TestingData)$net.result
RMSE3  <- rmse(actual, predictions3)
MAE3   <- mae(actual, predictions3)
MAPE3  <- mape(actual, predictions3)
SMAPE3 <- smape(actual, predictions3)
cat("\nMLP 3 - RMSE:", RMSE3, "MAE:", MAE3, "MAPE:", MAPE3, "sMAPE:", SMAPE3, "\n")
summary(predictions3)
# Model 4
predictions4 <- neuralnet::compute(MLP4, TestingData)$net.result
RMSE4  <- rmse(actual, predictions4)
MAE4   <- mae(actual, predictions4)
MAPE4  <- mape(actual, predictions4)
SMAPE4 <- smape(actual, predictions4)
cat("\nMLP 4 - RMSE:", RMSE4, "MAE:", MAE4, "MAPE:", MAPE4, "sMAPE:", SMAPE4, "\n")
summary(predictions4)
# Load necessary libraries
if (!require("neuralnet")) install.packages("neuralnet")
if (!require("Metrics")) install.packages("Metrics")
if (!require("readxl")) install.packages("readxl")
library(neuralnet)
library(Metrics)
library(readxl)
# Data Loading
ExchangeData <- read_excel("ExchangeUSD.xlsx")
colnames(ExchangeData)[colnames(ExchangeData) == "USD/EUR"] <- "USD_EUR" # Rename column
# Create lagged features t-1 to t-4
exchangeRates <- ExchangeData$USD_EUR
ExchangeData$Lag_1 <- c(NA, exchangeRates[1:(length(exchangeRates) - 1)])
ExchangeData$Lag_2 <- c(NA, NA, exchangeRates[1:(length(exchangeRates) - 2)])
ExchangeData$Lag_3 <- c(NA, NA, NA, exchangeRates[1:(length(exchangeRates) - 3)])
ExchangeData$Lag_4 <- c(NA, NA, NA, NA, exchangeRates[1:(length(exchangeRates) - 4)])
# Normalization function (Min-Max Scaling)
normalize <- function(x) {
return((x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE)))
}
# Apply normalization to numeric columns
NColumns <- sapply(ExchangeData, is.numeric)
ExchangeData[NColumns] <- lapply(ExchangeData[NColumns], normalize)
# Data partitioning
TrainData <- na.omit(ExchangeData[1:400,])
TestData <- na.omit(ExchangeData[401:500,])
# Set seed for reproducibility
set.seed(123)
# Define the formula
formula <- USD_EUR ~ Lag_1 + Lag_2 + Lag_3 + Lag_4
#MLP Neural Network: 1st case (1 hidden layer with 5 neurons)
MLP1 <- neuralnet(formula, data = TrainData, hidden = 5, linear.output = TRUE)
plot(MLP1)
#MLP Neural Network: 2st case (2 hidden layers (5,3))
MLP2 <- neuralnet(formula, data = TrainData, hidden = c(5,3), linear.output = TRUE)
plot(MLP2)
#MLP Neural Network: 3st case (3 hidden layers (5,3,2))
MLP3 <- neuralnet(formula, data = TrainData, hidden = c(5,3,2), linear.output = TRUE)
plot(MLP3)
#MLP Neural Network: 4st case (4 hidden layers (5,4,3,2))
MLP4 <- neuralnet(formula, data = TrainData, hidden = c(5,4,3,2), linear.output = TRUE)
plot(MLP4)
# Prepare test data for predictions
TestingData <- TestData[, c("Lag_1", "Lag_2", "Lag_3", "Lag_4")]
actual <- TestData$USD_EUR
# Model 1
predictions1 <- neuralnet::compute(MLP1, TestingData)$net.result
RMSE1  <- rmse(actual, predictions1)
MAE1   <- mae(actual, predictions1)
MAPE1  <- mape(actual, predictions1)
SMAPE1 <- smape(actual, predictions1)
cat(  "\nMLP 01 - RMSE:", RMSE1, "MAE:", MAE1, "MAPE:", MAPE1, "sMAPE:", SMAPE1, "\n")
summary(predictions1)
# Model 2
predictions2 <- neuralnet::compute(MLP2, TestingData)$net.result
RMSE2  <- rmse(actual, predictions2)
MAE2   <- mae(actual, predictions2)
MAPE2  <- mape(actual, predictions2)
SMAPE2 <- smape(actual, predictions2)
cat("\nMLP 2 - RMSE:", RMSE2, "MAE:", MAE2, "MAPE:", MAPE2, "sMAPE:", SMAPE2, "\n")
summary(predictions2)
# Model 3
predictions3 <- neuralnet::compute(MLP3, TestingData)$net.result
RMSE3  <- rmse(actual, predictions3)
MAE3   <- mae(actual, predictions3)
MAPE3  <- mape(actual, predictions3)
SMAPE3 <- smape(actual, predictions3)
cat("\nMLP 3 - RMSE:", RMSE3, "MAE:", MAE3, "MAPE:", MAPE3, "sMAPE:", SMAPE3, "\n")
summary(predictions3)
# Model 4
predictions4 <- neuralnet::compute(MLP4, TestingData)$net.result
RMSE4  <- rmse(actual, predictions4)
MAE4   <- mae(actual, predictions4)
MAPE4  <- mape(actual, predictions4)
SMAPE4 <- smape(actual, predictions4)
cat("\nMLP 4 - RMSE:", RMSE4, "MAE:", MAE4, "MAPE:", MAPE4, "sMAPE:", SMAPE4, "\n")
summary(predictions4)
#Model 1
plot(actual, type = 'l', col = 'blue', ylim = range(c(actual, predictions1)), ylab = "Exchange Rate", xlab = "Days", main = "MLP 1 - Actual vs Predicted")
lines(predictions1, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted Data"), lty = 1)
# Model 2
plot(actual, type = 'l', col = 'blue', ylim = range(c(actual, predictions2)), ylab = "Exchange Rate", xlab = "Days", main = "MLP 2 - Actual vs Predicted")
lines(predictions2, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted Data"), lty = 1)
# Model 3
plot(actual, type = 'l', col = 'blue', ylim = range(c(actual, predictions3)), ylab = "Exchange Rate", xlab = "Days", main = "MLP 3 - Actual vs Predicted")
lines(predictions3, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted Data"), lty = 1)
# Model 4
plot(actual, type = 'l', col = 'blue', ylim = range(c(actual, predictions4)), ylab = "Exchange Rate", xlab = "Days", main = "MLP 4 - Actual vs Predicted")
lines(predictions4, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted Data"), lty = 1)
#Model 1
plot(actual, type = 'l', col = 'blue', ylim = range(c(actual, predictions1)), ylab = "Exchange Rate", xlab = "Days", main = "MLP 1 - Actual vs Predicted")
lines(predictions1, col = 'red')
legend("bottomright", col = c("blue", "red"), legend = c("Actual Data", "Predicted Data"), lty = 1)
